---
title: "Quasi Dark-Adapted Rapid Light Curve Analysis"
subtitle: "From measurements taken by a Walz Diving PAMII"
author: "Sarah Tanja"
date: "`r format(Sys.time(), '%d %B, %Y')`"  
format:
  html:
    df-print: paged
    toc: true
    toc-location: right
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: false
    code-tools: true
    code-copy: true
    highlight-style: breeze
    code-overflow: wrap
    theme: minty
editor: 
  markdown: 
    wrap: 72
---

# Install and load packages

```{r}
# Install packages
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')

# Load packages
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
```

# Pull in metadata

This metadata should contain the specific information about the
treatment each specimen of *Anthopleura elegantissima* was exposed to,
and the very important `No.` column which maps to the `No.` column in
the Walz PAM output report, and allows us to link specimens to the data
we collected for them via the PAM.

We've done this consecutively and with repeated measures across 5 days
(here we will likely exclude the pre-exposure measurements from the
final analysis because they were taken with a less refined method.. The
pre-exposure measurements were taken using just the 60$^o$ 5mm sample
adapter in a fully dark-adapted state, however, the small size of the
anemones and their proclivity to squish themselves into the corners of
their jars and the inner curves of the petri dishes made it difficult to
get standardized distances from the anemones to the tip of the fiber
optic fluorometer). We solved this in later measurements by 3D-printing
and using a custom 60$^o$ 5mm adapter with a reduced 'base-plate' so it
could fit directly on the anemones in corners and tight spots. We also
switched from fully dark-adapted rapid light curves (dark adapted for at
least 40 min) to quasi dark-adapted rapid light curves (dark adapted for
20 seconds). Since we plan to use this method in field applications in
ambient light conditions, it's logistically advantageous to measure
rapid light curves during daylight hours.

Here we pull in the metadata for each day of rapid light curve
measurements taken prior to, and daily during, the experiment.

```{r}
metadata_0619 <- read_csv("../metadata/rlc_metadata_06192024.csv")
metadata_0620 <- read_csv("../metadata/rlc_metadata_06202024.csv")
metadata_0621 <- read_csv("../metadata/rlc_metadata_06212024.csv")
metadata_0622 <- read_csv("../metadata/rlc_metadata_06222024.csv")
```

Each metadata file should have 60 observations.

# Pull in data

This data is generated by the report tab in the Win-3 Control Software
of the Walz Diving PAM II. Of importance to note is that regression 1
(REG1) and regression 2 (REG2) for each light curve are listed above the
tabular light curve data.

```{r}
rlc_0619 <- read_csv("../pam-data/rlc_06192024.csv")
rlc_0620 <- read_csv("../pam-data/rlc_06202024.csv")
rlc_0621 <- read_csv("../pam-data/rlc_06212024.csv")
rlc_0622 <- read_csv("../pam-data/rlc_06222024.csv")
```

# Join & filter data

Join metadata to the PAM data by matching "No." in the rlc dataframe to
"No." in the corresponding rlc dataframe

```{r}
rlc_0619 <- left_join(rlc_0619, metadata_0619, by = "No.") 
rlc_0620 <- left_join(rlc_0620, metadata_0620, by = "No.") 
rlc_0621 <- left_join(rlc_0621, metadata_0621, by = "No.") 
rlc_0622 <- left_join(rlc_0622, metadata_0622, by = "No.") 
```

# Section data

## Identify start and end indices, & extract RLC's
Markers for each RLC (inclusive of regression rows)

### Day 1 | June 19th 2024
```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0619$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0619$Sync == "LCE")
```


Each RLC should be inclusive of the start and end markers and the regression data. 
We'll use a loop to go through each start and end pair
```{r}
# Initialize a list to store the dataframes
list_rlc_0619 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0619[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0619[[i]] <- chunk
}
```

### Day 2 | June 20th 2024
```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0620$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0620$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0620 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0620[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0620[[i]] <- chunk
}
```
### Day 3 | June 21st 2024
```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0621$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0621$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0621 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0621[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0621[[i]] <- chunk
}
```
### Day 4 | June 2nd 2024
```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0622$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0622$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0622 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0622[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0622[[i]] <- chunk
}
```


## Fill in metadata to all rows

Use a loop to iterate through the list of dataframes and apply fill() to
each metadata variable we want filled in

```{r}
for (i in seq_along(list_rlc_0619)){
  list_rlc_0619[[i]] <- list_rlc_0619[[i]] %>% 
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>% 
    fill(condition, .direction = "up") %>%
    fill(condition, .direction = "down") %>%
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>% 
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(aggregate, .direction = "up") %>%
    fill(aggregate, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0620)){
  list_rlc_0620[[i]] <- list_rlc_0620[[i]] %>% 
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>% 
    fill(condition, .direction = "up") %>%
    fill(condition, .direction = "down") %>%
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>% 
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(aggregate, .direction = "up") %>%
    fill(aggregate, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0621)){
  list_rlc_0621[[i]] <- list_rlc_0621[[i]] %>% 
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>% 
    fill(condition, .direction = "up") %>%
    fill(condition, .direction = "down") %>%
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>% 
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(aggregate, .direction = "up") %>%
    fill(aggregate, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0622)){
  list_rlc_0622[[i]] <- list_rlc_0622[[i]] %>% 
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>% 
    fill(condition, .direction = "up") %>%
    fill(condition, .direction = "down") %>%
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>% 
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(aggregate, .direction = "up") %>%
    fill(aggregate, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

# Extract alpha, ETRm, & Ik values

```{r}
# Define a regex pattern to extract alpha, ETRm, and Ik values
regex <- "alpha: ([\\d.-]+), ETRm: ([\\d.-]+), Ik: ([\\d.-]+)"

```

For 06/19, 1st day of exposure
```{r}
# Initialize a regression dataframe
regression_0619 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0619)){
  jasby_platt <- list_rlc_0619[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, condition, temp, aggregate, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 1) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0619 data frame
  regression_0619 <- bind_rows(regression_0619, jasby_platt)
}
```

For 06/20, 2nd day of exposure
```{r}
# Initialize a regression dataframe
regression_0620 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0620)){
  jasby_platt <- list_rlc_0620[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, condition, temp, aggregate, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 2)
  
  # Append the modified dataframe to the regression_0619 data frame
  regression_0620 <- bind_rows(regression_0620, jasby_platt)
}
```







```{r}
# rename FvFm & make numeric
photobot_results <- photobot_results %>% 
  rename(FvFm = "1:Fv/Fm") 

photobot_results <- photobot_results %>% 
  mutate(alpha = as.numeric(alpha)) %>% 
  mutate(ETRm = as.numeric(ETRm)) %>% 
  mutate(Ik = as.numeric(Ik))

print(photobot_results)

```

# Make treatment a factor

```{r}
photobot_results <- photobot_results %>% 
  mutate(treatment = as.factor(treatment))

class(photobot_results$treatment)
```

# Fv/Fm

```{r}
fvfm_aov <- aov(FvFm ~ treatment,
  data = photobot_results
)

summary(fvfm_aov)
```

```{r}

FvFm <- ggplot(photobot_results) +
  aes(x = treatment, y = FvFm, fill= treatment) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Concentration vs. Photosynthetic efficiency (Fv/Fm)",
    x = "Leachate concentration (mg/L)",
    y = "Photosynthetic efficiency (Fv/Fm)"
  ) +
  scale_x_discrete(labels = c("Control ", "PPa 0.01", "PPa 0.1","PPa 1", "PPa 10", "PPa 100","PVC 0.01", "PVC 0.1", "PVC 1", "PVC 10", "PVC 100")) +  
  scale_fill_manual(values = c("seashell", "coral", "coral1","coral2","coral3", "coral4","dodgerblue","dodgerblue1","dodgerblue2", "dodgerblue3","dodgerblue4")) 

FvFm

# Save the ggplot object to a PNG file
ggsave(filename = "FvFm.png", plot = FvFm, width = 11, height = 6, dpi = 600)

```

# Alpha
## Day 1
```{r}
Alpha_1 <- ggplot(regression_0619) +
  aes(x = treatment, y = alpha, fill= leachate) +
  geom_boxplot() +
  scale_x_discrete(limits = c("ambient_control", "hot_control", 
                              "ambient_low", "hot_low", 
                              "ambient_high", "hot_high")) +
  scale_y_continuous(breaks = pretty(regression_0619$alpha, n = 5)) + # Limit number of ticks
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Alpha values on the 1st day of exposure",
    x = "",
    y = "Alpha"
  ) 

Alpha_1

# Save the ggplot object to a PNG file
#ggsave(filename = "Alpha.png", plot = Alpha, width = 11, height = 6, dpi = 300)
```

## anova
temp
```{r}
alpha_aov <- aov(alpha ~ temp,
  data = regression_0619
)

summary(alpha_aov)
```

leachate
```{r}
alpha_aov <- aov(alpha ~ leachate,
  data = regression_0619
)

summary(alpha_aov)
```
temp*leachate
```{r}
alpha_aov <- aov(alpha ~ temp*leachate,
  data = regression_0619
)

summary(alpha_aov)
```




### plot

```{r}
PVCAlpha <- ggplot(photobot_pvc) +
  aes(x = treatment, y = alpha, fill= treatment) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Concentration vs. Alpha",
    x = "Leachate concentration (mg/L)",
    y = "Alpha"
  ) +
  scale_x_discrete(labels = c("Control ", "PVC 0.01", "PVC 0.1", "PVC 1", "PVC 10", "PVC 100")) +  
  scale_fill_manual(values = c("seashell", "dodgerblue","dodgerblue1","dodgerblue2", "dodgerblue3","dodgerblue4")) 

PVCAlpha

# Save the ggplot object to a PNG file
ggsave(filename = "PVCAlpha.png", plot = PVCAlpha, width = 11, height = 6, dpi = 300)

```

Alpha (α) Definition: Alpha (α) is defined as the initial slope of the
Rapid Light Curve at low light intensities. It represents the
photosynthetic efficiency, indicating how effectively a photosynthetic
organism can use available light for photosynthesis under low light
conditions. A higher alpha value indicates that the photosynthetic
organism is highly efficient at utilizing low light levels, which can be
crucial for survival in shaded or low-light environments. Conversely, a
lower alpha suggests less efficiency in low light conditions. The alpha
value is calculated from the initial linear portion of the Rapid Light
Curve. It is determined by fitting a straight line to the data points at
the lowest light intensities and calculating the slope of this line. The
steeper the slope, the higher the photosynthetic efficiency at low
light.

### anova

```{r}
alpha_pvc_aov <- aov(alpha ~ treatment,
  data = photobot_pvc
)

summary(alpha_pvc_aov)
```

### Dunnett's test

Is the lowest PVC leachate concentration actually larger than the
control? Or is this a `Type II error`, or error of multiple tests? I
followed the [stats and r blog to conduct a post-hoc Dunnett's
test](https://statsandr.com/blog/anova-in-r/#post-hoc-test:~:text=plot(TukeyHSD(res_aov))-,Dunnett%E2%80%99s%20test,-We%20have%20seen)
on the above ANOVA result.

```{r}
if ("multcomp" %in% rownames(installed.packages()) == 'FALSE') install.packages('multcomp')
library(multcomp)

# Make sure `treatment` is a factor


# Dunnett's test:
post_test <- glht(alpha_pvc_aov,
  linfct = mcp(treatment = "Dunnett")
)

summary(post_test)
```

::: callout-warning
The Dunnett's test adjusted *p* value comparing the lowest PVC
concentration to the control (*p* = .0671) indicated that the treatment
is not significantly different from the control.
:::

::: callout-note
Note that in R, by default, the reference category for a [factor
variable](https://statsandr.com/blog/data-types-in-r/#factor) is the
first category in alphabetical order. This is the reason that, by
default, the reference species is `Control`.

The reference category can be changed with the `relevel()` function (or
with the [`{questionr}`
addin](https://statsandr.com/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/#reordering-factors)).
Look
[here](https://statsandr.com/blog/anova-in-r/#post-hoc-test:~:text=%23%20Change%20reference%20category%3A)
for an example.
:::

Examining the 95% family-wise confidence level comparing the treatments
to the controls:

```{r}

# Open the PNG device
png(filename = "Dunnett.png", width = 800, height = 600, res = 72)

### use sufficiently large upper margin
old.par <- par(mai=c(1,2.25,1.25,0.25), no.readonly=TRUE)
### plot
plot(post_test)
par(old.par)

# Close the device
dev.off()

```

```{r}
### use sufficiently large upper margin
old.par <- par(mai=c(1,2.25,1.25,0.25))
### plot
plot(post_test)
par(old.par)
```

## PP only?

```{r}
photobot_pp <- photobot_results %>% 
  filter(treatment %in% c('Control', 'PP_A_0.01_mgL', 'PP_A_0.1_mgL', 'PP_A_1_mgL', 'PP_A_10_mgL', 'PP_A_100_mgL'))

photobot_pp
```

```{r}
alpha_pp_aov <- aov(alpha ~ treatment,
  data = photobot_pp
)

summary(alpha_pp_aov)
```

```{r}
ggplot(photobot_pp) +
  aes(x = treatment, y = alpha, fill= treatment) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Concentration vs. Alpha",
    x = "Leachate concentration (mg/L)",
    y = "Alpha"
  ) +
  scale_x_discrete(labels = c("Control ", "PPa 0.01", "PPa 0.1","PPa 1", "PPa 10", "PPa 100")) +  
  scale_fill_manual(values = c("seashell", "coral", "coral1","coral2","coral3", "coral4"))
```

# ETRm

```{r}
etrm_aov <- aov(ETRm ~ treatment,
  data = photobot_results
)

summary(etrm_aov)
```

```{r}
ggplot(photobot_results) +
  aes(x = treatment, y = ETRm, fill= treatment) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Concentration vs. rETRm",
    x = "Leachate concentration (mg/L)",
    y = "rETRm"
  ) +
  scale_x_discrete(labels = c("Control ", "PPa 0.01", "PPa 0.1","PPa 1", "PPa 10", "PPa 100","PVC 0.01", "PVC 0.1", "PVC 1", "PVC 10", "PVC 100")) +  
  scale_fill_manual(values = c("seashell", "coral", "coral1","coral2","coral3", "coral4","dodgerblue","dodgerblue1","dodgerblue2", "dodgerblue3","dodgerblue4"))
```

# Ik

```{r}
ik_aov <- aov(Ik ~ treatment,
  data = photobot_results
)

summary(ik_aov)
```

```{r}
Ik <- ggplot(photobot_results) +
  aes(x = treatment, y = Ik, fill= treatment) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
   labs(
    title = "Leachate concentration vs. Saturating Irradiance (Ik)",
    x = "Leachate concentration (mg/L)",
    y = "Saturating Irradiance (PAR umol/m2/s)"
  ) +
  scale_x_discrete(labels = c("Control ", "PPa 0.01", "PPa 0.1","PPa 1", "PPa 10", "PPa 100","PVC 0.01", "PVC 0.1", "PVC 1", "PVC 10", "PVC 100")) +  
  scale_fill_manual(values = c("seashell", "coral", "coral1","coral2","coral3", "coral4","dodgerblue","dodgerblue1","dodgerblue2", "dodgerblue3","dodgerblue4"))

Ik

```

What the hell is wrong with the control!?
